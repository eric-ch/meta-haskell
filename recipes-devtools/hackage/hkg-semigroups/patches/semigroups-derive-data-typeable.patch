From: Matthias Goergens <matthias.goergens@citrix.com>
Subject: [PATCH] Fix (probably) cabal error

I guess since we are using a cabal that's too old, we are getting those errors.

diff --git a/Data/List/NonEmpty.hs b/Data/List/NonEmpty.hs
index 31f6249..3e1ce2e 100644
--- a/Data/List/NonEmpty.hs
+++ b/Data/List/NonEmpty.hs
@@ -1,7 +1,5 @@
 {-# LANGUAGE CPP #-}
-#ifdef LANGUAGE_DeriveDataTypeable
 {-# LANGUAGE DeriveDataTypeable #-}
-#endif
 -----------------------------------------------------------------------------
 -- |
 -- Module      :  Data.List.NonEmpty
@@ -103,17 +101,13 @@ import Data.Traversable
 -- import Data.Semigroup.Foldable
 -- import Data.Semigroup.Traversable
 
-#ifdef LANGUAGE_DeriveDataTypeable
 import Data.Data
-#endif
 
 infixr 5 :|, <|
 
 data NonEmpty a = a :| [a] deriving 
   ( Eq, Ord, Show, Read
-#ifdef LANGUAGE_DeriveDataTypeable
   , Data, Typeable
-#endif
   )
 
 xor :: NonEmpty Bool -> Bool
diff --git a/Data/Semigroup.hs b/Data/Semigroup.hs
index fb5bc85..980a5de 100644
--- a/Data/Semigroup.hs
+++ b/Data/Semigroup.hs
@@ -1,7 +1,5 @@
 {-# LANGUAGE CPP #-}
-#ifdef LANGUAGE_DeriveDataTypeable
 {-# LANGUAGE DeriveDataTypeable #-}
-#endif
 -----------------------------------------------------------------------------
 -- |
 -- Module      :  Data.Semigroup
@@ -68,9 +66,7 @@ import Data.IntSet (IntSet)
 import Data.Map (Map)
 import Data.IntMap (IntMap)
 
-#ifdef LANGUAGE_DeriveDataTypeable
 import Data.Data
-#endif
 
 infixr 6 <>
 
@@ -189,9 +185,7 @@ instance Semigroup (NonEmpty a) where
 
 newtype Min a = Min { getMin :: a } deriving
   ( Eq, Ord, Bounded, Show, Read
-#ifdef LANGUAGE_DeriveDataTypeable
   , Data, Typeable
-#endif
   )
 
 instance Ord a => Semigroup (Min a) where
@@ -204,9 +198,7 @@ instance (Ord a, Bounded a) => Monoid (Min a) where
 
 newtype Max a = Max { getMax :: a } deriving
   ( Eq, Ord, Bounded, Show, Read
-#ifdef LANGUAGE_DeriveDataTypeable
   , Data, Typeable
-#endif
   )
 
 instance Ord a => Semigroup (Max a) where
@@ -220,10 +212,8 @@ instance (Ord a, Bounded a) => Monoid (Max a) where
 -- | Use @'Option' ('First' a)@ -- to get the behavior of 'Data.Monoid.First'
 newtype First a = First { getFirst :: a } deriving
   ( Eq, Ord, Bounded, Show, Read
-#ifdef LANGUAGE_DeriveDataTypeable
   , Data
   , Typeable
-#endif
   )
 
 instance Semigroup (First a) where
@@ -233,9 +223,7 @@ instance Semigroup (First a) where
 -- | Use @'Option' ('Last' a)@ -- to get the behavior of 'Data.Monoid.Last'
 newtype Last a = Last { getLast :: a } deriving
   ( Eq, Ord, Bounded, Show, Read
-#ifdef LANGUAGE_DeriveDataTypeable
   , Data, Typeable
-#endif
   )
 
 instance Semigroup (Last a) where
@@ -249,9 +237,7 @@ instance Semigroup (Last a) where
 newtype WrappedMonoid m = WrapMonoid
   { unwrapMonoid :: m } deriving
   ( Eq, Ord, Bounded, Show, Read
-#ifdef LANGUAGE_DeriveDataTypeable
   , Data, Typeable
-#endif
   )
 
 instance Monoid m => Semigroup (WrappedMonoid m) where
@@ -267,9 +253,7 @@ instance Monoid m => Monoid (WrappedMonoid m) where
 newtype Option a = Option
   { getOption :: Maybe a } deriving
   ( Eq, Ord, Show, Read
-#ifdef LANGUAGE_DeriveDataTypeable
   , Data, Typeable
-#endif
   )
 
 instance Functor Option where
